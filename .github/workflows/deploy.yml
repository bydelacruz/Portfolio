name: Deploy Node App to Namecheap

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Node setup
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # 3) Install dev deps for build (Tailwind/PostCSS etc.)
      - name: Install dependencies (includes dev)
        run: npm ci --include=dev

      # 4) Build
      - name: Build (Next.js)
        run: npm run build

      # 5) Prepare minimal deploy bundle
      - name: Prepare deploy bundle
        run: |
          set -e
          rm -rf deploy
          mkdir -p deploy
          cp -r .next deploy/.next
          [ -d public ] && cp -r public deploy/public || true
          [ -f server.js ] && cp server.js deploy/server.js || true
          [ -f server.mjs ] && cp server.mjs deploy/server.mjs || true
          [ -f next.config.js ] && cp next.config.js deploy/ || true
          [ -f next.config.mjs ] && cp next.config.mjs deploy/ || true
          cp package.json deploy/package.json
          [ -f package-lock.json ] && cp package-lock.json deploy/package-lock.json || true

      # 6) Start ssh-agent and load your private key (MULTI-LINE raw key secret)
      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      # 7) Trust host key (avoids interactive prompt)
      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      # 8) Upload deploy/ with rsync over SSH (fast & reliable)
      - name: Rsync deploy bundle
        run: |
          rsync -az --delete \
            -e "ssh -p ${{ secrets.SSH_PORT }}" \
            deploy/ "${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ secrets.REMOTE_DIR }}/"

      # 9) Install prod deps on server & restart Passenger
      - name: Install runtime deps & restart app
        run: |
          ssh -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}" <<'EOSSH'
          set -e
          cd "${{ secrets.REMOTE_DIR }}"
          mkdir -p tmp
          npm ci --omit=dev
          touch tmp/restart.txt
          echo "Deployment complete âœ…"
          EOSSH
